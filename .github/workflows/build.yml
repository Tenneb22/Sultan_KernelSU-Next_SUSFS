name: Sultan
description: Build Sultan Kernel with KernelSU Next and SUSFS
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      codename:
        required: true
        type: string
      repo:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
  
jobs:
  build-kernel-sultan-kernelsu-susfs:
    runs-on: ubuntu-latest
    steps:
      #- name: Maximize Build Space
      #  uses: AdityaGarg8/remove-unwanted-software@v5
      #  with:
      #    remove-dotnet: 'true'          # Frees ~2 GB
      #    remove-android: 'true'         # Frees ~9 GB
      #    remove-haskell: 'true'         # Frees ~5.2 GB
      #    remove-codeql: 'true'          # Frees ~5.4 GB
      #    remove-docker-images: 'true'   # Frees ~3.2 GB
      #    remove-large-packages: 'true'  # Frees ~3.1 GB
      #    remove-swapfile: 'true'        # Frees ~4 GB
      #    remove-cached-tools: 'false'   # Avoid unless confirmed safe
      #    verbose: 'true'                # Enable detailed logging
          

      - name: Download and extract GCC 14.2.0 toolchain
        run: |
          echo "Downloading GCC 14.2.0 cross-compiler toolchain..."
          wget https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/14.2.0/x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar.gz
          echo "Extracting .gz file..."
          gunzip x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar.gz
          echo "Extracting .tar file..."
          tar -xf x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar
          echo "GCC 14.2.0 toolchain extracted successfully"

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ inputs.repo }}"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG set to: $CONFIG"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="sultan-${{ inputs.codename }}"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"

          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git
          git clone https://github.com/kerneltoast/${{ inputs.repo }}
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          cd susfs4ksu
          git checkout f16560ce8263fbfa9b2f259e9531f72d6fda4e3f
      
      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          cd ./Wild_KSU
          
          echo "Applying wild SUSFS patches..."
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true

          echo "Applying wild SUSFS Fix patches..."
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.12/fix_core_hook.c.patch ./
          patch -p1 --forward < fix_core_hook.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.12/fix_sucompat.c.patch ./
          patch -p1 --forward < fix_sucompat.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.12/fix_kernel_compat.c.patch ./
          patch -p1 --forward < fix_kernel_compat.c.patch
          
          # Change to common directory and apply SUSFS patch
          cd ..
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
          cp ../kernel_patches/sultan/sys.c_fix.patch ./
          patch -p1 --fuzz=3 < sys.c_fix.patch

      - name: Apply KSU Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/wild/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch

      - name: Configure KernelSU
        run: |
          cd "$CONFIG"
          # KernelSU Configuration
          echo "# KernelSU Configuration" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Configure Mountify Support
        run: |
          cd "$CONFIG"
          # Mountify Support
          echo "# Mountify Support" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Configure Networking
        run: |
          cd "$CONFIG"
          # Networking Configuration
          echo "# Networking Configuration" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Configure TCP Congestion Control
        run: |
          cd "$CONFIG"
          # BBR TCP Congestion Control
          echo "# BBR TCP Congestion Control" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Configure IPSet Support
        run: |
          cd "$CONFIG"
          # IPSet support
          echo "# IPSet Support" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_MAX=65534" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_IP=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_IPMARK=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_IPMAC=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_MAC=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_NET=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP_SET_LIST_SET=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Configure SUSFS
        run: |
          cd "$CONFIG"
          # SUSFS Configuration
          echo "# SUSFS Configuration" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig


      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Running sed commands..."
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="-Sultan-Wild"/' ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          make CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux- CC=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc -j$(nproc --all) ${{ inputs.codename }}_defconfig
          make CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux- CC=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc -j$(nproc --all)

      - name: Copy Images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Copying Image.lz4 and concatenating DTB files..."
          cp ./out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          if [ "${{ inputs.codename }}" == "gs201" ]; then
            cat ./out/google-devices/gs201/dts/*.dtb > ../AnyKernel3/dtb
            #cp ./out/google-devices/gs201/dts/dtbo.img ../AnyKernel3/dtbo.img
          elif [ "${{ inputs.codename }}" == "zuma" ]; then
            cat ./out/google-devices/zuma/dts/*.dtb > ../AnyKernel3/dtb
          elif [ "${{ inputs.codename }}" == "zumapro" ]; then
            cat ./out/google-devices/zumapro/dts/*.dtb > ../AnyKernel3/dtb
          fi

      - name: Create ZIP Files for Different Formats
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3

          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="${{ inputs.codename }}_A16_Sultan_WKSU_SUSFS.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.codename }}
          path: |
            *.zip
